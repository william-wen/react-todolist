{"version":3,"sources":["TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createTasks","bind","assertThisInitialized","key","delete","item","_this2","react_default","a","createElement","onClick","text","popconfirm","title","placement","onConfirm","okText","cancelText","icon","className","type","style","fontSize","listItems","entries","map","react_flip_move_es","duration","easing","Component","App","addItem","e","_inputElement","value","newItem","Date","now","setState","prevState","concat","preventDefault","state","deleteItem","tempList","index","listItem","indexOf","splice","onSubmit","ref","id","placeholder","autoFocus","src_TodoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2a32eed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Popconfirm, message, Icon } from 'antd';\nimport FlipMove from \"react-flip-move\";\nimport 'antd/dist/antd.css';\n\nclass TodoItem extends Component {\n  constructor(props){\n    super(props);\n    this.createTasks = this.createTasks.bind(this);\n  }\n\n  delete(key){\n    this.props.delete(key);\n  }\n\n  createTasks(item) {\n    return (\n      <div>\n        <li key={item.key} onClick={() => this.delete(item.key)}> {item.text} </li>\n        <Popconfirm\n          title=\"Are you sure you want to delete this item?\"\n          placement=\"right\"\n          onConfirm={() => this.delete(item.key)}\n          okText=\"Yes\"\n          cancelText=\"No\"\n        >\n          <Icon className=\"minus-icon\" type=\"minus-circle\" style={{ fontSize: \"16px\" }}/>\n        </Popconfirm>\n      </div>\n    );\n  }\n  render () {\n    let todoEntries = this.props.entries;\n    let listItems = todoEntries.map(this.createTasks);\n\n    return (\n      <ul className=\"listItem\">\n      <FlipMove duration={250} easing=\"ease-out\">\n        {listItems}\n      </FlipMove>\n      </ul>\n    );\n  }\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoItem from './TodoItem.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      listItems: [],\n    };\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  addItem = (e) => {\n    if (this._inputElement.value !== \"\"){\n      var newItem = {\n        text: this._inputElement.value,\n        key: Date.now()\n      };\n\n      this.setState((prevState) => {\n        return {\n          listItems: prevState.listItems.concat(newItem)\n        };\n      });\n    }\n\n    this._inputElement.value=\"\";\n    e.preventDefault();\n  }\n\n  deleteItem(key) {\n    // var filteredItems = this.state.listItems.filter( function(item){\n    //   return (item.key !== key)\n    // });\n    //\n    // this.setState({\n    //   listItems: filteredItems\n    // });\n    let tempList = this.state.listItems;\n    let keyArray = this.state.listItems.map((listItem) =>\n      listItem.key\n    );\n    let index = keyArray.indexOf(key);\n    if (index > -1){\n      tempList.splice(index, 1);\n    }\n    this.setState({\n      listItems: tempList\n    });\n  }\n\n  render () {\n    const { listItems } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"page-cover\">\n          <div className=\"inputAndButton\">\n            <h1> Todo List </h1>\n            <form onSubmit={this.addItem}>\n              <input ref={(a) => this._inputElement = a} id=\"text-input\" placeholder=\"Enter Task\" autoFocus=\"autofocus\"/>\n              <button type=\"submit\" id=\"red-button\"> Add </button>\n            </form>\n          </div>\n          <TodoItem entries={this.state.listItems} delete={(key) => this.deleteItem(key)}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}